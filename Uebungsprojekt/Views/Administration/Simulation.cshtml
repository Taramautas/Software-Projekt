@model Uebungsprojekt.ViewModel.Administration.SimulationViewModel
@{
    ViewData["Title"] = "Simulation";
    Layout = "_PlanerLayout";
}

<h1 class="page-title">@ViewData["Title"]</h1>
<div class="container">
    <div class="col-sm-12">
        <h2><i>Simulation Data</i></h2><br />
    </div>
    <div class="row">
        <div class="col-sm-3">
            Tick:
        </div>
        <div class="col-sm-9">
            <div id="liveticks">0 out of @Model.result.num_generated_bookings.Count</div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Current time in Simulation:
        </div>
        <div class="col-sm-9">
            <div id="time"> </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            Minutes per Tick:
        </div>
        <div class="col-sm-9">
            @Model.result.config.tick_minutes
        </div>
    </div>
</div>
<br />

<table id="simulation-table"style="width:100%" class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Location</th>
            <th>ChargingZone</th>
            <th>Workload</th>
        </tr>
    </thead>
    <tbody>
        @foreach (ChargingZone zone in Model.charging_zones)
        {
        <tr id="charging-zone-@zone.name">
            <td>@zone.location.city</td>
            <td>@zone.name</td>
            <td><span class="workload-span"></span></td>
        </tr>
        }
    </tbody>
</table>


<br />
<div class="row">
    <div class="col-sm-12">
        <abbr title="See Results">
            <a class="btn btn-outline-primary ml-1 submit" asp-area="" asp-controller="Administration" asp-action="SimulationEvaluation"><span class="material-icons">show_chart</span></a>
        </abbr>
    </div>
</div>
<script>
    var live_ticks = document.getElementById("liveticks");
    var num_ticks = '@Html.Raw(Model.result.num_generated_bookings.Count)';

    // Update Ticks
    function liveTicks(i) {
        setTimeout(function () {
            live_ticks.innerHTML = i + " out of " + num_ticks; console.log(i)
            if (i < num_ticks) 
                liveTicks(i + 1)
        }, 2000)
    }

    var i = 1;
    liveTicks(i); 

    // Update Date, Time
    function updateClock() {
        var now = new Date(), // current date
            months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; // you get the idea
        var day = (now.getDate() < 10 ? '0' : '') + now.getDate(); 
        var seconds = (now.getSeconds() < 10 ? '0' : '') + now.getSeconds();
        var minutes = (now.getMinutes() < 10 ? '0' : '') + now.getMinutes();
        var hours = (now.getHours() < 10 ? '0' : '') + now.getHours(); 
        time = hours + ':' + minutes + ':' + seconds,

            // a cleaner way than string concatenation
            date = [day,
            months[now.getMonth()],
            now.getFullYear()].join(' ');

        // set the content of the element with the ID time to the formatted string
        document.getElementById('time').innerHTML = [date, time].join(', ');

        // call this function again in 1000ms
        setTimeout(updateClock, 1000);
    }
    updateClock();
    
    var start_datetime = '@Html.Raw(Model.result.start_datetime)';
    console.log(start_datetime);
</script>