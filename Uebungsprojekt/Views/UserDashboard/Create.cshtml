@model Uebungsprojekt.ViewModel.UserDashboard.CreateViewModel
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@{
    ViewData["Title"] = "Create Booking";
    Layout = "_Layout";
}

<h1 class="page-title">@ViewData["Title"]</h1>

<!-- Form Tag Helper in order to prevent cross-site request forgery -->
<form asp-controller="UserDashboard" asp-action="Create" method="post">
    <div class="form-group row">
        <label for="StateOfCharge" class="col-2 col-form-label">Current state of charge:</label>
        <input id="StateOfCharge" class="col-10 form-control" asp-for="booking.start_state_of_charge"><br />
        <span asp-validation-for="booking.start_state_of_charge" class="text-danger form-danger-span"></span>
    </div>
    <div class="form-group row">
        <label for="NeededDistance" class="col-2 col-form-label">Target state of charge:</label>
        <input id="NeededDistance" class="col-10 form-control" asp-for="booking.target_state_of_charge"><br />
        <span asp-validation-for="booking.target_state_of_charge" class="text-danger form-danger-span"></span>
    </div>
    <div class="form-group row">
        <label for="StartTime" class="col-2 col-form-label">Start time:</label>
        <input id="StartTime" class="col-10 form-control" asp-for="booking.start_time"><br />
        <span asp-validation-for="booking.start_time" class="text-danger form-danger-span"></span>
    </div>
    <div class="form-group row">
        <label for="EndTime" class="col-2 col-form-label">End time:</label>
        <input id="EndTime" class="col-10 form-control" asp-for="booking.end_time"><br />
        <span asp-validation-for="booking.end_time" class="text-danger form-danger-span"></span>
    </div>
    <div class="form-group row">
        <label for="vehicle_id" class="col-2 col-form-label">Vehicle:</label>
        <select name="vehicle_id" id="vehicle_id">
            @if (Model.vehicle.Any())
            {
                @foreach (var vehicle in Model.vehicle)
                {
                    <option value="@vehicle.id">@vehicle.id - @vehicle.model_name</option>
                }
            }
            else
            {
                <option>--No Vehicles available--</option>
            }
        </select>
    </div>
    <div class="form-group row">
        <label for="location_id" class="col-2 col-form-label">Location:</label>
        <select name="location_id" id="location_id">
            @if (Model.location.Any())
            {
                @foreach (var location in Model.location)
                {
                    <option value="@location.id">@location.city</option>
                }
            }
            else
            {
                <option>--No Locations available--</option>
            }
        </select>
    </div>

    @if ((await AuthorizationService.AuthorizeAsync(User, "Assistant")).Succeeded)
    {
        <div class="form-group row">
            <label for="eindeutige_benutzernummer" class="col-2 col-form-label">User:</label>
            <select name="eindeutige_benutzernummer" id="eindeutige_benutzernummer">
                @if (Model.users.Any())
                {
                    @foreach (var user in Model.users)
                    {
                        <option value="@user.id">@user.name + (@user.email)</option>
                    }
                }
                else
                {
                    <option>--No Users available--</option>
                }
            </select>
        </div>
    }


    <div class="row">
        <button id="btnsub" class="btn btn-outline-primary col-12" type="submit">Create</button>
    </div>
</form>

<!-- Enable client side validation -->
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}
<script>
    document.getElementById('StartTime').value = new Date().toISOString().slice(0, 10);
    document.getElementById('EndTime').value = new Date().toISOString().slice(0, 10);

    StartTime.min = new Date().toISOString().split("T")[0];
    EndTime.min = new Date().toISOString().split("T")[0];

    function validate_Date() {
        let start_time = document.getElementById('StartTime');
        let end_time = document.getElementById('EndTime');

        let sub_button = document.getElementById('btnsub');

        if (start_time.value >= end_time.value) {
            sub_button.disabled = true;
        } else {
            sub_button.disabled = false;
        }
        setTimeout(validate_Date, 1000);
    }
    validate_Date();

    function validate_SoC() {
        let current_SoC = document.getElementById('StateOfCharge');
        let target_SoC = document.getElementById('NeededDistance');

        let sub_button = document.getElementById('btnsub');

        if (target_SoC.value >= current_SoC.value) {
            sub_button.disabled = false;
        } else {
            sub_button.disabled = true;
        }
        setTimeout(validate_SoC, 1000);
    }
    validate_SoC()

</script>